"""Data required to build Dudley parser.

The tables and rules skeleton are automatically generated by bisonx.py
using the dudley.y grammar file and the .tab.c file Bison gnerates from it.
"""
import re
from ast import literal_eval

__all__ = ["regexp", "handler", "tables", "rules"]

# Bison prepends EOF, error, and UNDEF tokens to %token declaration in .y,
# so add 2 to re group number to get bison symbol kind.
regexp = re.compile(r'(?:((?:"(?:\\.|[^"\\])+"'
                    r"|'(?:\\.|[^'\\])+'|[A-Za-z_][0-9A-Za-z_]*))"  # 1 SYMBOL
                    r"|(0x[0-9aA-Fa-f]+|\d+)"  # 2 INTEGER
                    r"|(:=)"  # 3 CEQ
                    r"|(==)"  # 4 EEQ
                    r"|(=\[)"  # 5 EQB
                    r"|(/\{)"  # 6 SLASHC
                    r"|(!@)"  # 7 BAT
                    r"|(\.\.)"  # 8 DOTDOT
                    r"|(\?{)"  # 9 QCURLY
                    r"|(@=)"  # 10 ATEQ
                    r"|(\?/)"  # 11 QSLASH
                    r"|(\?)"  # 12 QUEST
                    r"|(\++)"  # 13 PLUSSES
                    r"|(-+)"  # 14 MINUSES
                    r"|(=)"  # 15 EQ
                    r"|(\[)"  # 16 LBRACK
                    r"|(\])"  # 17 RBRACK
                    r"|(,)"  # 18 COMMA
                    r"|(/)"  # 19 SLASH
                    r"|(\*)"  # 20 STAR
                    r"|(\.)"  # 21 DOT
                    r"|(@)"  # 22 AT
                    r"|(%)"  # 23 PCNT
                    r"|(\{)"  # 24 LCURLY
                    r"|(\})"  # 25 RCURLY
                    r"|([<>|](?:[iu][1248]|f[248]"
                    r"|c(?:4|8|16)|S1|U[124]|p[48]))"  # 26 PRIMTYPE
                    r"|(![A-Za-z_][0-9A-Za-z_]*)"  # 27 SPECIAL
                    r"|(#.*)"  # 28 COMMENT
                    r"|(\S))", re.ASCII)  # 29 UNKNOWN single character
quoted = re.compile(r"[\"']")
# several token kinds need special handling:
SYMBOL, INTEGER, QUEST, PLUSSES, MINUSES, PRIMTYPE = 3, 4, 15, 16, 28
UNKOWN = 31
EOF, UNDEF = 0, 2  # Bison EOF and undefined token indexes


def handler(m, mprev):
    itok = m.lastindex + 2
    value = None
    if itok == SYMBOL:
        value = m.group()
        if quoted.match(value):
            value = literal_eval(value)
    elif itok == INTEGER:
        value = int(m.group(), 0)
    elif itok == QUEST:
        if not mprev or m.start() != mprev.end():  
            itok = UNDEF
    elif itok == PLUSSES or itok == MINUSES:
        start, end = m.span()
        if mprev and start == mprev.end():  
            value = m.end() - m.start()
        else:
            itok = UNDEF
    elif itok >= PRIMTYPE and itok < UNKNOWN:
        value = m.group()
        if value == "!DUDLEY":
            itok = EOF
    else:
        itok = UNDEF
    return itok, value


# The tables and rules skeletons are generated automatically by bisonx.py
# from the .y grammar file and bison-produced .tab.c file.  The rules
# skeletons are modified here to generate the internal representation
# of the Dudley layout.

tables = dict(
    pact = [
        -43,  79, -43, -43,  80,  -6,  17, -43, -43, -43,
        -43,  51, -43,  23,  36, -43, -43, -43,  36, -43,
         21, -43,  -9,  36, -43, -43,  40,  29,  29,  11,
        -43,  95, -43, -43, -43, -43,  24, -43, -43,  35,
         64,  35, -43, -43, -43,  35,  23,  24,  24,  35,
        -43, -43, -43, -43,  36, -43, -43, -43, -43,  52,
        -43, -43, -43, -43,  70,  33, -43,  13,  36, -43,
          7,  38,  24,  -9,  24, -43, -43, -43,  24,  35,
         98,  19, -43,  47, -43, -43, 105,  91, -43,  23,
         36,  35, -43, -43, 106, -43, -43,  -9, -43, -43,
         24, -43, 102, -43, -43, -43, -43, -43, -43,  70,
        -43,  35,  24, -43,  70, -43,  36, -43,  24, -43,
        108,  35, -43, -43,
    ],
    defact = [
         3,  0,  1, 18,  0,  0,  0, 16, 17,  2,
         4,  0, 56,  0,  0, 26, 25,  8,  0, 14,
         0, 49,  7,  0, 11, 72,  0,  0,  0,  0,
        68,  0, 21, 19, 22, 13, 44, 27, 23, 30,
         0, 30, 41, 42, 50, 30,  0, 44, 44, 30,
        67, 54, 57, 58,  0, 15, 55, 56, 60,  0,
        20, 39, 40, 28,  0, 44, 64,  0,  0, 66,
         0,  0, 44, 48, 44, 71, 70, 69, 44, 30,
         0,  0, 43, 35, 31, 38, 32,  0,  5,  0,
         0, 30, 24, 65,  0, 12,  6, 47, 10,  9,
        44, 52,  0, 53, 59, 36, 33, 34, 29,  0,
        62, 30, 44, 45,  0, 51,  0, 37, 44, 63,
         0, 30, 61, 46,
    ],
    pgoto = [
        -43, -43, -43, -15, -42, -11, -18, -43, -43, -43,
         28, -36, -33, -43, -30, -41,  -3,  25, -43, -43,
         22, -43,  56, -43, -43, -43,  46, -43, -43,  63,
    ],
    defgoto = [
         0,  1,  9, 10, 35, 38, 39, 11, 12, 40,
        64, 72, 85, 86, 87, 60, 61, 62, 73, 96,
        22, 56, 31, 57, 58, 81, 69, 70, 29, 30,
    ],
    table = [
         41,  21,  36,  65,  75,  45,  76,  77,  66,  74,
         67,  23,  25,  78,  26,  20,  47,  48,  89,  44,
          3,  24, 102,  27,  68,  42,  32,  33,  28,   7,
         90,  95,  32,  98,  92,  36,  79,  99,  49,  32,
          8,  83,  84, 100,  43,  46, 103, 110,  20,  59,
         91,  34,  25,  63,  26, 112,  82,  34,  59, 115,
         94, 105,  37,  27,  34,  66, 104,  67,  28,  71,
         21, 119, 111,  83,  84, 118, 117, 122,  36,   2,
          3,  68,   4,   5, 120,  13,  14,  15,   6,   7,
         88,  16,  50,  17,  44,  97,  51,  18, 121,  51,
          8,  19,  52,  53,  20,  52,  53,  13,   0,  15,
        108, 109,  54,  80,  55,  54,  93, 101,   0, 116,
        106, 107,   0,  19,   0, 113, 114, 123, 109,
    ],
    check = [
        18,   4, 13, 39,  46,  23,  47,  48,   1,  45,
         3,  17,  1, 49,   3,  24,  27,  28,   5,  22,
         1,   4,  3, 12,  17,   4,   3,   4,  17,  10,
        17,  72,  3, 74,  27,  46,  54,  78,  27,   3,
        21,   3,  4, 79,  23,   5,  27,  89,  24,  25,
        68,  28,  1, 18,   3,  91,   4,  28,  25, 100,
        22,  14, 26, 12,  28,   1,  81,   3,  17,  41,
        73, 112, 90,  3,   4, 111, 109, 118,  89,   0,
         1,  17,  3,  4, 114,   5,   6,   7,   9,  10,
        65,  11, 29, 13,  97,  73,   1,  17, 116,   1,
        21,  21,  7,  8,  24,   7,   8,   5,  -1,   7,
        19,  20, 17, 57,  19,  17,  70,  19,  -1,  17,
        15,  16, -1, 21,  -1,  19,  20,  19,  20,
    ],
    r1 = [
         0, 29, 30, 30, 31, 31, 31, 31, 31, 31,
        31, 31, 32, 32, 32, 32, 32, 32, 32, 33,
        33, 34, 34, 35, 35, 36, 37, 38, 39, 40,
        40, 41, 41, 41, 41, 42, 42, 43, 43, 44,
        44, 45, 45, 46, 46, 47, 47, 48, 48, 49,
        49, 50, 50, 50, 50, 51, 51, 52, 53, 54,
        54, 55, 55, 55, 55, 56, 56, 57, 57, 58,
        58, 58, 58,
    ],
    r2 = [
        0, 2, 2, 0, 1, 5, 5, 2, 2, 5,
        5, 2, 5, 3, 2, 3, 1, 1, 1, 1,
        2, 1, 1, 1, 3, 2, 2, 1, 1, 3,
        0, 1, 1, 2, 2, 1, 2, 3, 1, 1,
        1, 2, 2, 2, 0, 3, 5, 1, 0, 1,
        2, 4, 3, 3, 1, 2, 0, 1, 1, 2,
        0, 5, 3, 4, 1, 2, 1, 2, 1, 3,
        3, 3, 1,
    ],
    stos = [
         0, 30,  0,  1,  3,  4,  9, 10, 21, 31,
        32, 36, 37,  5,  6,  7, 11, 13, 17, 21,
        24, 45, 49, 17,  4,  1,  3, 12, 17, 57,
        58, 51,  3,  4, 28, 33, 34, 26, 34, 35,
        38, 35,  4, 23, 45, 35,  5, 34, 34, 27,
        58,  1,  7,  8, 17, 19, 50, 52, 53, 25,
        44, 45, 46, 18, 39, 40,  1,  3, 17, 55,
        56, 39, 40, 47, 40, 33, 44, 44, 40, 35,
        51, 54,  4,  3,  4, 41, 42, 43, 46,  5,
        17, 35, 27, 55, 22, 44, 48, 49, 44, 44,
        40, 19,  3, 27, 32, 14, 15, 16, 19, 20,
        33, 35, 40, 19, 20, 44, 17, 41, 40, 44,
        43, 35, 44, 19,
    ],
    tname = [
        "\"end of file\"", "error", "\"invalid token\"", "SYMBOL", "INTEGER",
        "CEQ", "EEQ", "EQB", "SLASHC", "BAT", "DOTDOT", "QCURLY", "ATEQ",
        "QSLASH", "QUEST", "PLUSSES", "MINUSES", "EQ", "LBRACK", "RBRACK",
        "COMMA", "SLASH", "STAR", "DOT", "AT", "PCNT", "LCURLY", "RCURLY",
        "PRIMTYPE", "$accept", "layout", "statement", "group_item",
        "parameter", "basetype", "type", "rootdef", "listdef", "struct",
        "shapedef", "shape", "dimension", "symbolq", "dimensions", "location",
        "address", "alignment", "ushape", "uaddress", "address_list",
        "list_item", "list_items", "anonlist", "anongroup", "group_items",
        "member", "members", "root_params", "root_param", "",
    ],
    final = 2)


class FunctionList(list):
    def __call__(self, args, method=None):

        def __call__(self, f):
            f.method = method
            f.args = args
            self.append(f)
            return f

        return rule

    def bind_to(self, builder):
        for i, rule in enumerate(self):
            method = rule.method
            if not method:
                continue
            method = builder[method]
            method.args = args
            method.rule = rule.__doc__
            self[i] = method


rules = FunctionList()

# Each rule function must return the LHS value (or None).
# The RHS values on the parser stack are indexed from -N
# to -1 if there are N symbols on the RHS (-N is first RHS.
# value and -1 is last RHS value).
# With @rule([-2, -4, -1]), the parser calls rule like this:
#   rule(value[-2], value[-4], value[-1])
# In other words, only the values of the specifically listed
# elements are passed to the rule.  An empty list passes no
# arguments to the rule.
# With @rule(arglist, 'method_name'), you can later invoke
#   rule.bind_to(builder)
# to make the parser call builder.method_name with the
# values for the specified stack elements.  (Leave the rule
# function body empty in this case - it is discarded.)
# The bind_to method adds a .args attribute to the method,
# which is required by the parser, and a .rule attribute
# recording the docstring of the rule for informational
# purposes.


@rules([])
def rule():
    """0 $error?"""

@rules([])
def rule():
    """1 $accept: . $end"""

@rules([])
def rule():
    """2 layout: layout statement"""

@rules([])
def rule():
    """3 layout: <empty>"""

@rules([])
def rule():
    """4 statement: group_item"""

@rules([-5, -3, -2, -1], "atype")
def rule(name, atype, shape, alignment):
    """5 statement: SYMBOL EEQ type shape alignment"""

@rules([-5, -3, -2, -1], "var")
def rule(name, atype, shape, address):
    """6 statement: SYMBOL EQ type ushape uaddress"""

@rules([-2, -1], "extend_array")
def rule(name, address):
    """7 statement: SYMBOL address_list"""

@rules([-2], "cdroot")
def rule(name):
    """8 statement: SYMBOL QSLASH"""

@rules([-2, -1], "close_root")
def rule(shape, location):
    """9 statement: rootdef root_params RCURLY shape location"""

@rules([-5, -3, -2, -1])
def rule(pointer, atype, shape, location):
    """10 statement: INTEGER EQ type shape location"""

@rules([-1], "set_address")
def rule(address):
    """11 statement: BAT INTEGER"""

@rules([-5, -3, -2, -1], "var")
def rule(name, atype, shape, location):
    """12 group_item: SYMBOL EQ type shape location"""

@rules([-3, -1], "param")
def rule(name, parameter):
    """13 group_item: SYMBOL CEQ parameter"""

@rules([-2], "cd")
def rule(name):
    """14 group_item: SYMBOL SLASH"""

@rules([], "close_list")
def rule():
    """15 group_item: listdef list_items RBRACK"""

@rules([], "cdup")
def rule():
    """16 group_item: DOTDOT"""

@rules([], "cdtop")
def rule():
    """17 group_item: SLASH"""

@rules([-1], "error18")
def rule(error):
    """18 group_item: error"""

@rules([-1], "parameter")
def rule():
    """19 parameter: INTEGER"""

@rules([-2, -1], "parameter")
def rule(atype, location):
    """20 parameter: basetype location"""

@rules([-1], "basetype")
def rule(name):
    """21 basetype: SYMBOL"""

@rules([-1], "basetype")
def rule(name):
    """22 basetype: PRIMTYPE"""

@rules([-1])
def rule(atype):
    """23 type: basetype"""
    return atype

@rules([], "close_struct")
def rule():
    """24 type: struct members RCURLY"""

@rules([-2], "open_root")
def rule(name):
    """25 rootdef: SYMBOL QCURLY"""

@rules([-2], "open_list")
def rule(name):
    """26 listdef: SYMBOL EQB"""

@rules([], "open_struct")
def rule():
    """27 struct: LCURLY"""

@rules([], "open_shape")
def rule():
    """28 shapedef: LBRACK"""

@rules([], "close_shape")
def rule():
    """29 shape: shapedef dimensions RBRACK"""

@rules([])
def rule():
    """30 shape: <empty>"""

@rules([-1], "dimension")
def rule(value):
    """31 dimension: INTEGER"""

@rules([-1])
def rule(symbolic):
    """32 dimension: symbolq"""
    return symbolic

@rules([-2, -1])
def rule(symbolic, increment):
    """33 dimension: symbolq PLUSSES"""
    return symbolic + increment

@rules([-2, -1])
def rule(symbolic, increment):
    """34 dimension: symbolq MINUSES"""
    return symbolic - increment

@rules([-1], "dimension")
def rule(name):
    """35 symbolq: SYMBOL"""

@rules([-2, -2], "dimension")
def rule(name, mode):
    """36 symbolq: SYMBOL QUEST"""

@rules([-1], "extend_shape")
def rule():
    """37 dimensions: dimensions COMMA dimension"""

@rules([-1], "extend_shape")
def rule():
    """38 dimensions: dimension"""

@rules([-1])
def rule(address):
    """39 location: address"""
    return address

@rules([-1])
def rule(alignment):
    """40 location: alignment"""
    return alignment

@rules([-1])
def rule(address):
    """41 address: AT INTEGER"""
    return address

@rules([])
def rule():
    """42 address: AT DOT"""
    return -1  # alignment 1 same as current address

@rules([-1])
def rule(alignment):
    """43 alignment: PCNT INTEGER"""
    return -alignment

@rules([])
def rule():
    """44 alignment: <empty>"""

@rules([], "close_ushape")
def rule():
    """45 ushape: shapedef STAR RBRACK"""

@rules([], "close_ushape")
def rule():
    """46 ushape: shapedef STAR COMMA dimensions RBRACK"""

@rules([-1])
def rule(address_list):
    """47 uaddress: address_list"""
    return address_list

@rules([])
def rule():
    """48 uaddress: <empty>"""

@rules([-1])
def rule(address):
    """49 address_list: address"""
    return [address]

@rules([-2, -1])
def rule(address_list, address):
    """50 address_list: address_list address"""
    return address_list.append(address)

@rules([-4, -3, -2, -1], "var")
def rule():
    """51 list_item: EQ type shape location"""

@rules([], "close_list")
def rule():
    """52 list_item: anonlist list_items RBRACK"""

@rules([], "close_group")
def rule():
    """53 list_item: anongroup group_items RCURLY"""

@rules([-1], "error54")
def rule(error):
    """54 list_item: error"""

@rules([])
def rule():
    """55 list_items: list_items list_item"""

@rules([])
def rule():
    """56 list_items: <empty>"""

@rules([], "open_list")
def rule():
    """57 anonlist: EQB"""

@rules([], "open_group")
def rule():
    """58 anongroup: SLASHC"""

@rules([])
def rule():
    """59 group_items: group_items group_item"""

@rules([])
def rule():
    """60 group_items: <empty>"""

@rules([-5, -3, -2, -1], "var")
def rule(name, atype, shape, location):
    """61 member: SYMBOL EQ type shape location"""

@rules([-3, -1], "param")
def rule(name, value):
    """62 member: SYMBOL CEQ parameter"""

@rules([-4, -3, -2, -1], "var")
def rule(name, atype, shape, location):
    """63 member: EQ type shape location"""

@rules([-1], "error64")
def rule(error):
    """64 member: error"""

@rules([])
def rule():
    """65 members: members member"""

@rules([])
def rule():
    """66 members: member"""

@rules([])
def rule():
    """67 root_params: root_params root_param"""

@rules([])
def rule():
    """68 root_params: root_param"""

@rules([-2, -1], "root_block")
def rule(basetype, location):
    """69 root_param: EQ basetype location"""

@rules([-2, -1], "root_address")
def rule(basetype, location):
    """70 root_param: ATEQ basetype location"""

@rules([-3, -1], "param")
def rule(name, value):
    """71 root_param: SYMBOL CEQ parameter"""

@rules([-1], "error72")
def rule(error):
    """72 root_param: error"""
del rule
